HW
Client_Server
1) Прочиать про клиент-серверную архитектуру
Железо или софт, который выполняет requests/response. Связаны друг с другом сетевыми протоколами.
одно устройство (компьютер) может выполнять функции как сервера, так и клиента.
Для взаимодействия компьютеры должны иметь общий язык, и они должны следовать правилам, чтобы и клиент,
и сервер знали, чего ожидать. Язык и правила общения определены в протоколе связи.
Компьютер может выполнять только ограниченное количество задач в любой момент.
Сервер может получать запросы от множества различных клиентов за короткий период времени.
Одно уровненвая система - Peer to peer
Многоуровневая (Трехуровенвая система - клиент-сервер-база данных). балансировщик, другие сервера,дублирующие сервера
Плюсы: Мощный сервер дешевле миллиона клиентских машин; Нет дублирования кода; Данные в безопасности.
Минусы: Сервер упал-ничего не работает; стоимость оборудования; нужен сис-админ;
Клиент (с ним работатет пользователь) Сервер ( тут хранится код) БД (тут лежат данные)


2) Что такое HTTP и HTTPS
HTTP (от англ. HyperText Transfer Protocol) ― это протокол передачи данных в интернете. С его помощью браузер получает
 информацию от сервера и показывает пользователю контент. Это первый протокол, который создали для работы в веб-пространстве.

HTTPS (от англ. HyperText Transfer Protocol Secure) ― защищённый протокол передачи данных в интернете. Это тот же протокол HTTP,
но защищенный SSL-сертификатом(старый) или TLS-сертификатом (новый)*.
*SSL-сертификат- Цифровой документ, который обеспечивает безопасное соединение и обмен данными между сайтом и пользователями путём шифрования 
передаваемой информации. SSL подтверждает подлинность веб-сайта и исключает возможность неправомерного использования вводимых данных.

Протокол HTTP от HTTPS отличается тем, что:
-протокол HTTP не обеспечивает защиту передаваемых данных — любая личная информация может быть перехвачена злоумышленниками;
-HTTP работает по порту 80, а HTTPS ― по порту 443;


3) HTTP методы
Они соответствуют операциям создания, чтения, обновления и удаления (или в совокупности - CRUD)
Create
Read
Update
Delete 

GET — получение ресурса
POST — создание ресурса
PUT — обновление ресурса
DELETE — удаление ресурса

GET запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные.

HEAD запрашивает ресурс так же, как и метод GET, но без тела ответа.

POST используется для отправки сущностей к определённому ресурсу. Часто вызывает изменение состояния или какие-то побочные эффекты на сервере.

PUT заменяет все текущие представления ресурса данными запроса.

DELETE удаляет указанный ресурс.

CONNECT устанавливает "туннель" к серверу, определённому по ресурсу.

OPTIONS используется для описания параметров соединения с ресурсом.

TRACE выполняет вызов возвращаемого тестового сообщения с ресурса.


PATCH используется для частичного изменения ресурса.

4) HTTP статус коды сервера
1xx: Информация
100 Continue
101 Switching Protocol
103 Checkpoint

2xx: Успех
200 OK
201 Created 
202 Accepted
203 Non-Authoritative Information	Не авторитетная информация Запрос был успешно обработан
(аналогично ответу 200), но в этом случае передаваемая информация была взята не из первичного источника 
(например, из резервной копии или другого сервера) и может быть неактуальной.
204 No Content
205 Reset Content 
206 Partial Content

3xx: Перенаправление
300 Multiple Choices 
301 Moved Permanently
302 Found 
303 See Other
304 Not Modified
305 Use proxy
306 Switch Proxy
307 Temporary Redirect
308 Resume Incomplete

4xx: Ошибки клиента
400 Bad Request
401 Unauthorized
402 Payment Required
403 Forbidden
404 Not Found
405 Method Not Allowed
406-417

5xx: Ошибки сервера
500 Internal Server Error
501 Not Implemented
502 Bad Gateway
503 Service Unavailable
504 Gateway Timeout
505 HTTP Version Not Supported
511 Network Authentication Required

5) Что такое ядро браузера 
6) Какие браузеры какиие ядра используют
7) Что такое API
API (Application programming interface) — Договор (контракт) между двумя сторонами, как договор на покупку машины (набор функций)
-что подать на вход;
-что получается на выходе;
-какие исключения нужно обработать.
Пользователи работают с GUI — graphical user interface. Программы работают с API — Application programming interface. 
Им не нужна графика, только контракт.

8. Что такое ендпоинты
9) URL (URI, URL, URN)
10) Идемпотентные HTTP методы
11) Безопасные HTTP методы
12) Иденфикация, Аутентификация, Авторизация
13) Что такое IP
14) Что такое октаты в DNS
15) Что такое порт, сколько портов у Linux сервера
16) Уровни OSI
17) Хедеры http запросов
HW
Client_Server
1) Прочиать про клиент-серверную архитектуру

Железо или софт, который выполняет requests/response. Связаны друг с другом сетевыми протоколами.
одно устройство (компьютер) может выполнять функции как сервера, так и клиента.
Для взаимодействия компьютеры должны иметь общий язык, и они должны следовать правилам, чтобы и клиент,
и сервер знали, чего ожидать. Язык и правила общения определены в протоколе связи.
Компьютер может выполнять только ограниченное количество задач в любой момент.
Сервер может получать запросы от множества различных клиентов за короткий период времени.
Одно уровненвая система - Peer to peer
Многоуровневая (Трехуровенвая система - клиент-сервер-база данных). балансировщик, другие сервера,дублирующие сервера
Плюсы: Мощный сервер дешевле миллиона клиентских машин; Нет дублирования кода; Данные в безопасности.
Минусы: Сервер упал-ничего не работает; стоимость оборудования; нужен сис-админ;
Клиент (с ним работатет пользователь) Сервер ( тут хранится код) БД (тут лежат данные)


2) Что такое HTTP и HTTPS

HTTP (от англ. HyperText Transfer Protocol) ― это протокол передачи данных в интернете. С его помощью браузер получает
 информацию от сервера и показывает пользователю контент. Это первый протокол, который создали для работы в веб-пространстве.

HTTPS (от англ. HyperText Transfer Protocol Secure) ― защищённый протокол передачи данных в интернете. Это тот же протокол HTTP,
но защищенный SSL-сертификатом(старый) или TLS-сертификатом (новый)*.
*SSL-сертификат- Цифровой документ, который обеспечивает безопасное соединение и обмен данными между сайтом и пользователями путём шифрования 
передаваемой информации. SSL подтверждает подлинность веб-сайта и исключает возможность неправомерного использования вводимых данных.

Протокол HTTP от HTTPS отличается тем, что:
-протокол HTTP не обеспечивает защиту передаваемых данных — любая личная информация может быть перехвачена злоумышленниками;
-HTTP работает по порту 80, а HTTPS ― по порту 443;


3) HTTP методы

Они соответствуют операциям создания, чтения, обновления и удаления (или в совокупности - CRUD)
Create
Read
Update
Delete 

GET — получение ресурса
POST — создание ресурса
PUT — обновление ресурса
DELETE — удаление ресурса

GET запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные.

HEAD запрашивает ресурс так же, как и метод GET, но без тела ответа.

POST используется для отправки сущностей к определённому ресурсу. Часто вызывает изменение состояния или какие-то побочные эффекты на сервере.

PUT заменяет все текущие представления ресурса данными запроса.

DELETE удаляет указанный ресурс.

CONNECT устанавливает "туннель" к серверу, определённому по ресурсу.

OPTIONS используется для описания параметров соединения с ресурсом.

TRACE выполняет вызов возвращаемого тестового сообщения с ресурса.


PATCH используется для частичного изменения ресурса.


4) HTTP статус коды сервера
1xx: Информация
100 Continue
101 Switching Protocol
103 Checkpoint

2xx: Успех
200 OK
201 Created 
202 Accepted
203 Non-Authoritative Information	Не авторитетная информация Запрос был успешно обработан
(аналогично ответу 200), но в этом случае передаваемая информация была взята не из первичного источника 
(например, из резервной копии или другого сервера) и может быть неактуальной.
204 No Content
205 Reset Content 
206 Partial Content

3xx: Перенаправление
300 Multiple Choices 
301 Moved Permanently
302 Found 
303 See Other
304 Not Modified
305 Use proxy
306 Switch Proxy
307 Temporary Redirect
308 Resume Incomplete

4xx: Ошибки клиента
400 Bad Request
401 Unauthorized
402 Payment Required
403 Forbidden
404 Not Found
405 Method Not Allowed
406-417

5xx: Ошибки сервера
500 Internal Server Error
501 Not Implemented
502 Bad Gateway
503 Service Unavailable
504 Gateway Timeout
505 HTTP Version Not Supported
511 Network Authentication Required


5) Что такое ядро браузера 
Ядро (движок) - представляет собой программу, преобразующую содержимое веб-страниц (файлы HTML, XML, цифровые изображения и т. д.) и информацию о форматировании (в форматах CSS, XSL и т. д.) в интерактивное изображение форматированного содержимого на экране.

Браузер = оболочка + ядро (движок)
Машина = корпус машины + двигатель и силовая установка

Ядро (движок) выполняет всю "грязную" работу: загрузка, обработка, отрисовка данных и все возможные расчёты.

Зачем?
С целью распространения (маштабирования) своих сервисов


6) Какие браузеры какиие ядра используют
Ядра (движки):
Blink (Chromium): Google 
Gecko (Firefox, Tor Browser): Mozilla
WebKit (Safari): Apple
EdgeHTML (Edge): Microsoft


7)Что такое API
API (Application programming interface) — Договор (контракт) между двумя сторонами, как договор на покупку машины (набор функций)
-что подать на вход;
-что получается на выходе;
-какие исключения нужно обработать.
Пользователи работают с GUI — graphical user interface. Программы работают с API — Application programming interface. 
Им не нужна графика, только контракт.


8. Что такое ендпоинты
Эндпоинт (в переводе с англ. — конечная точка) представляет собой некий шлюз, который соединяет серверные процессы приложения с внешним интерфейсом. Простыми словами, это адрес, на который отправляются сообщения.


9) URL (URI, URL, URN)
URL - Uniform Resource Location (унифицированный определитель местонахождения ресурса) http://www.vkk.ru/...
URL — адрес ресурса в сети, определяет местонахождение и способ обращения к нему

URN - Uniform Resource Name (унифицированное имя ресурса) ../kak_cho.html
А URN — имя ресурса в сети, определяет только название ресурса, но не говорит как к нему подключиться

URI - Uniform Resource Identifier (унифицированный идентификатор ресурса) - http://www.vkk.ru/kak_cho.html
URI - имя и адрес ресурса в сети, включает в себя URL и URN

10) Идемпотентные HTTP методы
КОРОЧЕ СОСТОЯНИЕ СЕРВЕРА НЕ МЕНЯЕТСЯ ПОСЛЕ ЗАПРОСА ЭТИМИ МЕТОДАМИ хоть 100500 раз
операция (или вызов сервиса) идемпотентна тогда, когда клиенты могут делать один и тот же вызов неоднократно при одном и том же результате (создание большого количества идентичных запросов имеет такой же эффект, как и один запрос)
*Ответ сам по себе может не быть тем же самым (например, состояние ресурса может измениться между запросами).
GET, HEAD, OPTIONS и TRACE, PUT и DELETE

11) Безопасные HTTP методы (все идемпотентные) - не создают нагрузку на сервер!
Метод HTTP является безопасным, если он не меняет состояние сервера. Другими словами, безопасный метод проводит операции "только чтение" (read-only). Несколько следующих методов HTTP безопасные: GET , HEAD или OPTIONS

12) Идентфикация, Аутентификация, Авторизация
Индентификация - процесс при котором субъект сообщает или ему присваевается идентификатор (Имя пользователя (логин))

Аутентификация - сверка идентификатора от субъекта с идентификатором на сервере или БД, проверка на подлинность (Пусть введет пароль к этому логину пользователя?Или пусть поддтвердит, что это правда он -двухавторная аутентификация)

Авторизация - предоставление определенному лицу или группе лиц прав на выполнение определенных действий. (Есть! Дайте доступ к ЛК)

13) Что такое IP
IP-адрес – это уникальный адрес, идентифицирующий устройство в интернете или локальной сети. IP означает «Интернет-протокол» – набор правил, регулирующих формат данных, отправляемых через интернет или локальную сеть.

По сути, IP-адрес – это идентификатор, позволяющий передавать информацию между устройствами в сети: он содержит информацию о местоположении устройства и обеспечивает его доступность для связи. 

14) Что такое откаты в DNS
Domain Name Sysytem (имена в записной книжке) Это глобальное распределенное хранилище ключей и значений. Сервера по всему миру могут предоставить вам значение по ключу, а если им неизвестен ключ, то они попросят помощи у другого сервера.
Обращение к другому серверу?

15) Что такое порт, сколько портов у Linux сервера
IP -адрес дома, порт - адрес квартиры (через какое приложение открывать)
Всего  0-65 535 портов
80: HTTP (Веб-port)
443: HTTPS
143: IMAP

16) Уровни OSI
Открытая сетевая модель OSI (Open Systems Interconnection model) - характеризует взаимодействие сетевого оборудования. Иными словами, посредством неё общаются такие устройства, как ПК с сетевыми картами, коммутаторы, роутеры.

Физический (Physical)
На самой нижней ступени модели OSI находится физический уровень. Он занимается непосредственно передачей информации. Здесь сигналы (радиосигналы, электрические, оптические) уходят от отправителя к получателю. На текущем уровне речь идёт о кабелях, радиоэфире, кодировании нулей и единиц и др. Сигнал первого уровня – это группа напряжений различной амплитуды, волн либо радиочастот.

Один из основных стандартов среди технологий физического уровня – Ethernet.

Канальный уровень (Data Link)
После получения сигнала с предыдущего физического уровня, на следующем (канальном) уровне происходит проверка и исправление погрешностей передачи. Здесь появляются термины «фрейм» и «MAC-адрес». MAC адреса занимают 48 бит в шестнадцатиричном формате и могут записываться, например, таким образом: 00:26:57:00:1f:02.

Второй уровень более сложный, чем предыдущий, физический. В нём условно выделяют следующие подуровни управления:

LLC (логическим каналом)
MAC (доступом к среде)
Устройствами второго, канального, уровня считаются мосты и коммутаторы.

Сетевой уровень (Network)
Над канальным уровнем находится следующий – сетевой. На этой ступени вводятся понятия «маршрутизация» и «IP-адрес». Для трансформации MAC-адресов в IP применяется протокол ARP.

Здесь осуществляется маршрутизация трафика. Когда пользователь, к примеру, желает перейти на сайт и вводит его адрес, отправляется DNS-запрос. Ответом на него будет IP-адрес, который подставляется в пакет. Пакет данных – это новый термин, который появляется на 3-м сетевом уровне.

Устройствами здесь являются роутер или маршрутизатор.

Транспортный уровень (Transport)
Здесь происходит доставка информации по каналам внешней сети. Блоки данных в данном случае делятся на отдельные фрагменты, размеры которых будут зависеть от используемого протокола. Для транспортного уровня это TCP и UDP. Какой из них лучше использовать, зависит от типа передаваемых данных.

TCP (Transmission Control Protocol) – протокол, хорошо подходящий для передачи трафика, для которого любые потери пакетов чувствительны. Процесс передачи контролируется, благодаря чему потерянные пакеты будут обнаружены и запрошены повторно. UDP (User Datagram Protocol) применяется, когда потеря нескольких пакетов не принципиальна. Например, при передаче видео, изображений.

Сеансовый уровень (Session)
Сеансовый уровень в ответе за организацию сеансов связи между приложениями на компьютерах. Он отвечает за создание и окончание сеанса, обмен данными, за синхронизацию и другие процессы.

К протоколам сеансового уровня, например, относятся X.225, ISO 8327, SMPP (через него отправляются СМС сообщения), PAP.

Уровень представления (Presentation)
На шестой ступени осуществляется преобразование форматов данных, например, сжатие и кодирование.

Уровень приложений (Application)
Верхний уровень модели, где располагаются сетевые службы, с которыми напрямую взаимодействуют пользователи. Данный уровень описывает взаимосвязь приложений на ПК и внешней сети. Сюда относятся протоколы для просмотра страниц в интернете (HTTPS, HTTP), для работы с почтовыми службами (SMTP, POP3), для передачи файлов (FTP, TFTP) и другие.

Когда осуществляется передача с верхнего на нижний, это именуется инкапсуляцией данных, а в обратном порядке – декапсуляцией.

17) Хедеры http запросов
Когда браузер запрашивает ресурс с сервера, он использует HTTP. Этот запрос включает набор пару ключ-значение, содержащих такую информацию, как версия браузера или форматы файлов, которые он понимает. Эти пары называются заголовками запросов.) Хедеры http запросов
Основные заголовки применяется как к запросам, так и к ответам, но не имеет отношения к данным, передаваемым в теле.
Заголовки запроса содержит больше информации о ресурсе, который нужно получить, или о клиенте, запрашивающем ресурс.
Заголовки ответа (en-US) содержат дополнительную информацию об ответе, например его местонахождение, или о сервере, предоставившем его.
Заголовки сущности содержат информацию о теле ресурса, например его длину содержимого или тип MIME.